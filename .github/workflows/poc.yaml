name: POC Release Build

on:
  push:
    branches: ["**"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CACHE_VERSION: 1
  AWS_DEFAULT_REGION: eu-central-1
  SERVICE_NAME: invoice-extractor

jobs:
  build-push:
    name: Test, Build, and Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

  # https://kamrul.dev/dynamically-add-github-actions-ip-to-aws-security-group/
  deploy-on-server:
    name: Deploy docker on production server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Fetch all history for better metadata

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa          


          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@3.121.209.39 sudo -i <<'EOF'

          echo "🚀 Waiting for all new tasks to be healthy and running..."

          STACK_NAME=invoice-extractor_app
          TIMEOUT=300
          SLEEP=5
          ELAPSED=0

          echo "          🚀 Deploying stack..."
          echo "          ⏳ Waiting for all updated tasks (by image SHA) to be running..."

          while true; do
                    PENDING_TASKS=""
                    UPDATED_COUNTS=""

                    # Loop through each service in the stack
                    for service in $(docker service ls --filter label=com.docker.stack.namespace=$STACK_NAME --format '{{.Name}}'); do
                              # Get the full image with SHA used in the current spec
                              SERVICE_IMAGE_WITH_SHA=$(docker service inspect "$service" --format '{{.Spec.TaskTemplate.ContainerSpec.Image}}')

                              # Get tasks for the service and check which ones match the current image SHA
                              MATCHING_TASKS=$(docker service ps "$service" --no-trunc --filter desired-state=Running \
                                        --format '{{.ID}} {{.Image}} {{.CurrentState}}' | grep "$SERVICE_IMAGE_WITH_SHA")

                              # Count how many matching tasks are running
                              RUNNING_UPDATED_TASKS=$(echo "$MATCHING_TASKS" | grep -c "Running")

                              # Identify any matching tasks that are NOT running yet
                              NOT_RUNNING_TASKS=$(echo "$MATCHING_TASKS" | grep -v "Running")

                              UPDATED_COUNTS+="$service: $RUNNING_UPDATED_TASKS updated running task(s)\n"

                              if [ -n "$NOT_RUNNING_TASKS" ]; then
                                        PENDING_TASKS+="$service has pending updated tasks:\n$NOT_RUNNING_TASKS\n"
                              fi
                    done

                    echo -e "\n          📊 Updated task status (matched by image SHA):\n$UPDATED_COUNTS"

                    if [ -z "$PENDING_TASKS" ]; then
                              echo "          ✅ All updated tasks are running with the correct image SHA."
                              break
                    fi

                    if [ "$ELAPSED" -ge "$TIMEOUT" ]; then
                              echo -e "\n          ❌ Timeout reached. Some updated tasks did not reach running state:"
                              echo -e "$PENDING_TASKS"
                              exit 1
                    fi

                    sleep $SLEEP
                    ELAPSED=$((ELAPSED + SLEEP))
          done



          EOF
