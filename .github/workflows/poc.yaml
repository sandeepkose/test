name: Release Build

on:
  push:
    branches: ["**"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CACHE_VERSION: 1
  AWS_DEFAULT_REGION: eu-central-1
  SERVICE_NAME: invoice-extractor

jobs:
  build-push:
    name: Test, Build, and Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

  # https://kamrul.dev/dynamically-add-github-actions-ip-to-aws-security-group/
  deploy-on-server:
    name: Deploy docker on production server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Fetch all history for better metadata

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa          


          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@3.121.209.39 sudo -i <<'EOF'

          SERVICE_NAME=invoice-extractor_app
          TIMEOUT=300
          SLEEP=5
          ELAPSED=0

          echo "🚀 Deploying service: $SERVICE_NAME"
          echo "⏳ Waiting for all tasks to be running with the updated image..."

          while true; do
                    # Get current image SHA from service spec
                    SERVICE_IMAGE_WITH_SHA=$(docker service inspect "$SERVICE_NAME" --format '{{.Spec.TaskTemplate.ContainerSpec.Image}}')

                    # Get all running tasks
                    TASKS=$(docker service ps "$SERVICE_NAME" --no-trunc --filter desired-state=Running --format '{{.ID}} {{.Image}} {{.CurrentState}}')

                    ALL_MATCH=true
                    RUNNING_TASKS_COUNT=0
                    PENDING_TASKS=""

                    while IFS= read -r line; do
                              TASK_ID=$(echo "$line" | awk '{print $1}')
                              TASK_IMAGE=$(echo "$line" | awk '{print $2}')
                              TASK_STATE=$(echo "$line" | awk '{$1=""; $2=""; print $0}' | xargs)

                              # Check image match
                              if [[ "$TASK_IMAGE" != "$SERVICE_IMAGE_WITH_SHA" ]]; then
                                        ALL_MATCH=false
                                        PENDING_TASKS+="Task $TASK_ID is running old image ($TASK_IMAGE)\n"
                              fi

                              # Check if running
                              if [[ "$TASK_STATE" == Running* ]]; then
                                        ((RUNNING_TASKS_COUNT++))
                              else
                                        ALL_MATCH=false
                                        PENDING_TASKS+="Task $TASK_ID is not running yet (state: $TASK_STATE)\n"
                              fi
                    done <<< "$TASKS"

                    echo "✅ Total running tasks: $RUNNING_TASKS_COUNT"

                    if $ALL_MATCH; then
                              echo "✅ All tasks are running and using the updated image."
                              break
                    else
                              echo -e "⏳ Waiting for tasks to update:\n$PENDING_TASKS"
                    fi

                    if [ "$ELAPSED" -ge "$TIMEOUT" ]; then
                              echo -e "\n❌ Timeout reached. Some tasks did not update correctly:"
                              echo -e "$PENDING_TASKS"
                              exit 1
                    fi

                    sleep $SLEEP
                    ELAPSED=$((ELAPSED + SLEEP))
          done





          EOF
