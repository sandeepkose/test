name: Release Build

on:
  push:
    branches: ["**"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CACHE_VERSION: 1
  AWS_DEFAULT_REGION: eu-central-1
  SERVICE_NAME: invoice-extractor

jobs:
  build-push:
    name: Test, Build, and Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

  # https://kamrul.dev/dynamically-add-github-actions-ip-to-aws-security-group/
  deploy-on-server:
    name: Deploy docker on production server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Fetch all history for better metadata

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      # ✅ Setup SSH key FIRST
      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa          


      - name: Deploy / Update Service on Swarm Leader
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
            ubuntu@3.127.149.107 sudo -i <<EOF
            echo "🚀 Deploying on Swarm Leader"
      
            # Login to GHCR and create Docker secret if needed
            echo "${{ secrets.PROD_GHCR_ACCESS_TOKEN }}" | sudo docker login ghcr.io -u "${{ secrets.PROD_GHCR_USERNAME }}" --password-stdin

            if ! docker secret ls | grep -q ghcr-auth; then
              echo "${{ secrets.PROD_GHCR_ACCESS_TOKEN }}" | sudo docker login ghcr.io -u "${{ secrets.PROD_GHCR_USERNAME }}" --password-stdin
              sudo docker secret create ghcr-auth ~/.docker/config.json || true
            fi

            # Count number of Ready + Active nodes
            NODE_COUNT=\$(docker node ls --format '{{.Status}} {{.Availability}}' | grep -c "Ready Active")
            echo "📊 Found \$NODE_COUNT Ready Active nodes"

            if grep -q '^REPLICAS=' "/root/.env"; then
              echo "🔁 Updating existing REPLICAS to $NODE_COUNT"
              sed -i "s/^REPLICAS=.*/REPLICAS=$NODE_COUNT/" "/root/.env"
            else
              echo "➕ Adding new REPLICAS=$NODE_COUNT"
            echo "REPLICAS=$NODE_COUNT" >> "/root/.env"
            fi
            
            echo "Deploy/Update stack"
            set -a && source /root/.env && set +a && docker stack deploy -c /root/docker-compose.yaml ${{ env.SERVICE_NAME }} --with-registry-auth

          EOF
